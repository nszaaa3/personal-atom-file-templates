<?xml version="1.0" encoding="UTF-8"?>
<!-- @Created with Atom -->
<!-- @author @author@ -->
<!-- @time @now@ -->
<!-- @description 国内莫改版mybatis-generator-config.xml -->

<!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd" >
<generatorConfiguration>
  <context id="context1" targetRuntime="MyBatis3" defaultModelType="flat">
    <!--  生成equals 和hashcode方法 -->
    <plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin" />
    <!--  实现序列化 -->
    <plugin type="org.mybatis.generator.plugins.SerializablePlugin" />
    <!--  生成toString 方法 -->
    <plugin type="org.mybatis.generator.plugins.ToStringPlugin" />
    <!--  重命名Example相关的类名 -->
    <plugin type="org.mybatis.generator.plugins.RenameExampleClassPlugin">
      <property name="searchString" value="Example" />
      <property name="replaceString" value="Criteria" />
    </plugin>
    <!--  将Mapper.java和mapper.xml文件中的Example的方法重命名为自己定义的 -->
    <plugin type="org.mybatis.generator.plugins.MyRenameExampleMethodPlugin">
      <property name="searchString" value="Example" />
      <property name="replaceString" value="Criteria" />
    </plugin>
    <!--  增加分页插件，分页参数自定义 -->
    <plugin type="org.mybatis.generator.plugins.MyPaginationPlugin">
      <property name="limitStartName" value="start" />
      <property name="limitSizeName" value="end" />
    </plugin>
    <!-- 去掉表前缀、重命名Mapper后缀；如果在table标签中设置了domainObjectName、mapperName后以table中设置的为准 -->
    <!--<plugin type="org.mybatis.generator.plugins.MyReplaceTablePrefix">
            &lt;!&ndash; 如tc_user;前缀tc 不包含 "_"  &ndash;&gt;
            &lt;!&ndash;<property name="tablePrefix" value="TC"/>&ndash;&gt;
            &lt;!&ndash; mapper文件后缀；如Dao; UserDao &ndash;&gt;
            <property name="mapperSuffix" value="Dao"/>
        </plugin>-->
    <!--  增加BaseDao插件，名称可以自定义 -->
    <plugin type="org.mybatis.generator.plugins.MyBaseDaoPlugin">
      <!--baseDao在你应用中的完全限定名 name:任意定义，表示BaseDao的名称；targetPackage、targetProject和下面的配置同理-->
      <property name="name" value="BaseDao" />
      <property name="targetPackage" value="dao" />
      <property name="targetProject" value=".\src" />
    </plugin>
    <!-- 增加自定义通用查询ExampleClass的包名和更改所在的目标工程 -->
    <plugin type="org.mybatis.generator.plugins.MyPackageExampleClassPlugin">
      <property name="targetPackage" value="example" />
      <!--
           true:表示使用javaClientGenerator的targetProject，false：默认值，表示使用javaModelGenerator的targetProject
           -->
      <property name="isProject" value="false" />
    </plugin>
    <!-- 单个对象查询插件，可根据不同字段进行查询 -->
    <plugin type="org.mybatis.generator.plugins.MySelectSingleByExamplePlugin" />
    <!-- 添加生成批量新增接口插件 -->
    <plugin type="org.mybatis.generator.plugins.MyInsertBatchPlugin" />
    <!-- 添加生成批量修改接口插件 -->
    <plugin type="org.mybatis.generator.plugins.MyUpdateBatchPlugin" />
    <!--  生成业务方法 -->
    <plugin type="org.mybatis.generator.plugins.MyBaseServicePlugin">
      <!-- name:baseService的名称 -->
      <property name="name" value="BaseService" />
      <!-- name:baseService存放的包名 -->
      <property name="targetPackageBaseService" value="service" />
      <!-- baseService 实现存放的包 -->
      <property name="targetPackageBaseServiceImpl" value="service.impl" />
      <!-- baseService所在的工程 -->
      <property name="targetBaseServiceProject" value=".\src" />
      <property name="targetBaseServiceImplProject" value=".\src" />
      <!-- 业务接口存放的包名 -->
      <property name="targetPackageBusinessService" value="service" />
      <!-- 业务接口的实现 -->
      <property name="targetPackageBusinessServiceImpl" value="service.impl" />
      <!-- 业务所在的工程 -->
      <property name="targetBusinessServiceProject" value=".\src" />
      <!-- 业务所在的工程 -->
      <property name="targetBusinessServiceImplProject" value=".\src" />
      <property name="searchString" value="Example" />
      <property name="replaceString" value="Criteria" />
      <!-- baseDao接口的完全限定名 -->
      <property name="baseDaoPackage" value="BaseDao" />
    </plugin>
    <!-- 获取表中的注释为实体类中的属性注释  -->
    <commentGenerator type="org.mybatis.generator.plugins.MyCommentGenerator">
      <!--  是否去除自动生成的注释 true：是 ： false:否  -->
      <property name="suppressAllComments" value="false" />
      <property name="suppressDate" value="false" />
      <property name="addRemarkComments" value="true" />
    </commentGenerator>
    <jdbcConnection driverClass="com.mysql.jdbc.Driver" connectionURL="jdbc:mysql://localhost:3306/fuckssmpage?characterEncoding=utf-8" userId="root" password="root"> </jdbcConnection>
    <!-- 转换数据类型，通过自定义将BIT和TINYINT转换为integer -->
    <javaTypeResolver type="org.mybatis.generator.plugins.MyJavaTypeResolverDefaultImpl">
      <!--
           true:当数据类型为decimal时，始终生成BigDecimal；false：当数据库类型为decimal时，但是没有小数点的时候，则生成Long类型
           -->
      <property name="forceBigDecimals" value="true" />
    </javaTypeResolver>
    <!--
        生成模型的包名和位置 targetPackage 要生成在哪个包下；targetProject：该包所在的父级目录
       -->
    <javaModelGenerator targetPackage="entity" targetProject=".\src" />
    <!--  生成映射文件的包名和位置 -->
    <sqlMapGenerator targetPackage="mapper" targetProject=".\" />
    <!--  生成DAO的包名和位置 -->
    <javaClientGenerator targetPackage="dao" targetProject=".\src" type="org.mybatis.generator.plugins.MyJavaMapperGenerator" />
    <!--
        要生成哪些表：tableName：需要生成的表名；domainObjectName：自定义的对应改表的实体类名称；
       -->
    <table tableName="post" domainObjectName="Post" mapperName="PostMapper">
      <!--  如果是自增主键，column需要修改为自己的主键名称 -->
      <generatedKey identity="true" column="id" sqlStatement="SELECT LAST_INSERT_ID()" />
    </table>
  </context>
</generatorConfiguration>